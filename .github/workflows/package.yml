name: package
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    tags:   # run workflow on pushing a tag, atm relies on user inputting valid semver, could make it do checks with regex if required.
      - '*'


env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  PushedTag: ${{ github.ref_name}} # save the pushed tag for later use after deleting them
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: bash

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    steps:
    - name: checkout and delete existing tags on github, then create local tag for use by gitversion
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using GitVersion
    
    
    - name: find highest existing tag and check if it's higher than or equal to pushed tag. if not highest tag remove new tag and exit with status 1
      run: |
       echo ${{env.PushedTag}}
       git tag -l | sort -r --version-sort | head -n1 | echo
      #  if [[ $(git tag | sort -r --version-sort | head -n1) != ${{env.PushedTag}} ]]; then echo abort; else echo continue with package build; fi


    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # deletes all tags within virtual machine then remakes pushed tag for use by gitversion
    - name: reset tags
      run: |
       git tag -l | xargs git tag -d
       git tag ${{env.PushedTag}}

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.1.11
      with:
        versionSpec: '6.0.0'
    

    - name: Use GitVersion
      uses: gittools/actions/gitversion/execute@v3.1.11



    # something where version number is passed in, set that for future build steps and in final package. 
    # somewhere earlier, try to either retrieve old semVer number and increment,
    # or ask for user input (e.g. tag update with semVer or in commit message)

    # Run dotnet tests and output dll in default location
    - run: dotnet test --configuration Release
    # Create the NuGet package in the folder from the environment variable NuGetDirectory, 
    # using the dll output from the test step above
    - run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 1 # lowered retention cause i'm making a bunch of these while testing stuff
        path: ${{ env.NuGetDirectory }}/*.nupkg

