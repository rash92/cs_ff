name: package
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:      # Run the workflow when pushing to the main branch
    tags:   # run workflow on pushing a tag
      - '*'
  # pull_request:
  #   branches:
  #     - '*'          # Run the workflow for all pull requests
  # release:
  #   types:
  #     - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  PushedTag: ${{ github.ref_name}}
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using GitVersion

    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: delete current tag
      run: git tag -d ${{env.PushedTag}}

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.1.11
      with:
        versionSpec: '6.0.0'
    

    - name: Use GitVersion
      uses: gittools/actions/gitversion/execute@v3.1.11



    # something where version number is passed in, set that for future build steps and in final package. 
    # somewhere earlier, try to either retrieve old semVer number and increment,
    # or ask for user input (e.g. tag update with semVer or in commit message)

    # Run dotnet tests and output dll in default location
    - run: dotnet test --configuration Release
    # Create the NuGet package in the folder from the environment variable NuGetDirectory, 
    # using the dll output from the test step above
    - run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

